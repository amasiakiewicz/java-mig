support dla jdk 11 kończy się we wrześniu przyszłego roku, 3 lata supportu na LTS

Java 9:
- project Jigsaw - specyfikujemy moduły i zależności między nimi (dla low memory) i wybieramy tylko te niebędne, dla starych Nokii? lol
- nowy klient http -> HttpClient i HttpRequest zamiast HttpURLConnection (ktoś tego używał? ;)
- nowy ProcessHandle - meta info o jvm (argumenty, command line, start time, czas cpu) - być może do healtha?
- final lub effectively final autoclosable w try-with-resources, nie tylko new - to spoko
- prywatne metody w interfejsach (statyczne od jdk 8) - dla def metod
- jshell - do testowania snippetów (coś ala scratch w intellij)
- VarHandle i MethodHandle zamiast Unsafe (refleksja na sterydach) - nie używać, chyba że dla zabawy
- kilka metod pomocniczych do set i stream (of, optional, itd)

Java 10:
- (demo) var dla zmiennych lokalnych - można używać kiedy po prawej znany jest typ (konstruktor, zdefiniowana wartość), w przeciwnym razie zaciemnia obraz
- zmiany językowe w kolekcjach, np copyOf (zwraca nie mut. kopię), collector.toUnmodified..., zmiany językowe w Optionalach -> orElseThrow
- flagi dockerowe (na linuxach) dla cpu i mem -XX:-UseContainerSupport, -XX:ActiveProcessorCount=count, -XX:InitialRAMPercentage, -XX:MaxRAMPercentage, -XX:MinRAMPercentage
- TLS działa by def w OpenJDK (cacerts keystore ma teraz certy i są open source)

Java 11 (LTS):
- nowe metody w stringu - search tam to może być pierwszy wybór przed szukaniem w StringUtilsach
- nowe metody w Files (do zapisu i odczytu stringów) -> writeString i readString
- (demo) Predicate.not - np w filter, działa też dla method reference
- var w lambdzie, żeby np dodać adnotacje do typów - raczej mało użyteczne (intellij może to sprawdzać, ale to trochę mało)
- in-memory compilation (java HelloWorld.java zamiast javac i potem java)
- Java Flight Recorder jest teraz za free (diagnostyka i profiling) i potem w mission control (spoko poza samplingiem -> lepiej asyn-profiler, jprofiler)

Java 12:
- nowe metody w stringu
- Files.mismatch - porównuje pliki i zwraca pozycję pierwszej różnicy
- (demo) Collector.teeing -> merge 2 innych kolektorów
- (demo) CompactNumberFormat - formatowanie liczb zgodnie z lokale
-- preview
-- (demo - bardziej z ciekawości) switch expressions -> raczej nie polecam, ifologia zazwyczaj świadczy o złym designie kodu (brak obiektowości, polimorfizmu)
-- (demo - bardziej z ciekawości) pattern matching w instanceOf -> też nie polecam - znowu świadczy o złym designie

Java 13:
-- preview
-- (demo) yield w switch expressions
-- (demo) text blocks - super sprawa

Java 14:
- switch expressions jest już normalnie dostępne, nie jako preview
- escape'y dla text blocks \ (nie wstawiaj nowej linii) i \s (spacja)
- (demo) records - automatyczne dodawanie constructor, getters, equals, hashCode i toString - value objecty, mają kilka minusów, lepiej używać lomboka

Java 15:
- text blocks production ready
-- preview
-- (demo) sealed classes/interfaces - wskazujemy które klasy/interfejsy mogą dziedziczyć lub implementować je, taki dodatkowy modyfikator widoczności -> w sumie całkiem przydatne

Java 16:
- można wywoływać defaultowe metody za pomocą jdk dynamic proxy (Proxy.newProxyInstance...) -> rzadko kiedy potrzebne
- Stream.toList
- operacje na wektorach (IntVector.fromArray) - szybsze operacje (incubating - czyli api będzie się zmieniać w kolejnych wersjach)
- pattern matching producton ready

Java 17 (LTS):
- (demo) random number generator stream ready
- sealed classes production ready
-- preview
-- (demo) pattern matching for switch -> pattern matching i switch, lepiej jakiś visitor pattern albo mapa, choć jako last resort ok
